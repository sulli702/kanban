!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Reading Room Kanban | Personal Task Manager</title>
    <style>
        :root {
            --yellow-note: #fff8b8;
            --blue-note: #b8e0ff;
            --green-note: #b8ffca;
            --pink-note: #ffb8e0;
            --orange-note: #ffe0b8;
        }
        
        body, html {
            margin: 0;
            padding: 0;
            font-family: 'Bookman Old Style', 'Garamond', 'Times New Roman', serif;
            background-color: #f4efe1;
            background-image: url("data:image/svg+xml,%3Csvg width='100' height='100' viewBox='0 0 100 100' xmlns='http://www.w3.org/2000/svg'%3E%3Cpath d='M11 18c3.866 0 7-3.134 7-7s-3.134-7-7-7-7 3.134-7 7 3.134 7 7 7zm48 25c3.866 0 7-3.134 7-7s-3.134-7-7-7-7 3.134-7 7 3.134 7 7 7zm-43-7c1.657 0 3-1.343 3-3s-1.343-3-3-3-3 1.343-3 3 1.343 3 3 3zm63 31c1.657 0 3-1.343 3-3s-1.343-3-3-3-3 1.343-3 3 1.343 3 3 3zM34 90c1.657 0 3-1.343 3-3s-1.343-3-3-3-3 1.343-3 3 1.343 3 3 3zm56-76c1.657 0 3-1.343 3-3s-1.343-3-3-3-3 1.343-3 3 1.343 3 3 3zM12 86c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm28-65c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm23-11c2.76 0 5-2.24 5-5s-2.24-5-5-5-5 2.24-5 5 2.24 5 5 5zm-6 60c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm29 22c2.76 0 5-2.24 5-5s-2.24-5-5-5-5 2.24-5 5 2.24 5 5 5zM32 63c2.76 0 5-2.24 5-5s-2.24-5-5-5-5 2.24-5 5 2.24 5 5 5zm57-13c2.76 0 5-2.24 5-5s-2.24-5-5-5-5 2.24-5 5 2.24 5 5 5zm-9-21c1.105 0 2-.895 2-2s-.895-2-2-2-2 .895-2 2 .895 2 2 2zM60 91c1.105 0 2-.895 2-2s-.895-2-2-2-2 .895-2 2 .895 2 2 2zM35 41c1.105 0 2-.895 2-2s-.895-2-2-2-2 .895-2 2 .895 2 2 2zM12 60c1.105 0 2-.895 2-2s-.895-2-2-2-2 .895-2 2 .895 2 2 2z' fill='%23d0c6a5' fill-opacity='0.2' fill-rule='evenodd'/%3E%3C/svg%3E");
            height: 100%;
            overflow: hidden;
        }
        
        .header {
            background-color: #2b3d41;
            color: #e1d9c4;
            padding: 15px 25px;
            box-shadow: 0 3px 10px rgba(0,0,0,0.3);
            display: flex;
            justify-content: space-between;
            align-items: center;
            border-bottom: 3px solid #8b4513;
            background-image: url("data:image/svg+xml,%3Csvg width='52' height='26' viewBox='0 0 52 26' xmlns='http://www.w3.org/2000/svg'%3E%3Cg fill='none' fill-rule='evenodd'%3E%3Cg fill='%23805c36' fill-opacity='0.1'%3E%3Cpath d='M10 10c0-2.21-1.79-4-4-4-3.314 0-6-2.686-6-6h2c0 2.21 1.79 4 4 4 3.314 0 6 2.686 6 6 0 2.21 1.79 4 4 4 3.314 0 6 2.686 6 6 0 2.21 1.79 4 4 4v2c-3.314 0-6-2.686-6-6 0-2.21-1.79-4-4-4-3.314 0-6-2.686-6-6zm25.464-1.95l8.486 8.486-1.414 1.414-8.486-8.486 1.414-1.414z' /%3E%3C/g%3E%3C/g%3E%3C/svg%3E");
        }
        
        h1 {
            margin: 0;
            font-size: 2rem;
            font-family: 'Baskerville', 'Libre Baskerville', 'Garamond', serif;
            letter-spacing: 1px;
            text-shadow: 1px 1px 2px rgba(0,0,0,0.3);
        }
        
        .controls {
            display: flex;
            gap: 10px;
            align-items: center;
        }
        
        button {
            background-color: #8b4513;
            color: #f4efe1;
            border: 1px solid #704214;
            padding: 8px 15px;
            border-radius: 2px;
            cursor: pointer;
            font-weight: bold;
            transition: all 0.3s;
            font-family: inherit;
            box-shadow: 0 2px 4px rgba(0,0,0,0.2);
        }
        
        button:hover {
            background-color: #9b5523;
            transform: translateY(-1px);
            box-shadow: 0 3px 5px rgba(0,0,0,0.3);
        }
        
        .filter-dropdown {
            padding: 8px 12px;
            border-radius: 2px;
            border: 1px solid #8b4513;
            background-color: #f9f6ee;
            color: #2b3d41;
            font-family: inherit;
            box-shadow: inset 0 1px 2px rgba(0,0,0,0.1);
        }
        
        .board-container {
            display: flex;
            height: calc(100vh - 60px);
            overflow-x: auto;
            padding: 20px;
        }
        
        .column {
            min-width: 280px;
            background-color: #e8e0cc;
            margin-right: 20px;
            border-radius: 3px;
            box-shadow: 0 4px 8px rgba(0,0,0,0.15);
            display: flex;
            flex-direction: column;
            max-height: 100%;
            border: 1px solid #c9bb9a;
            position: relative;
        }
        
        .column:after {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-image: url("data:image/svg+xml,%3Csvg width='6' height='6' viewBox='0 0 6 6' xmlns='http://www.w3.org/2000/svg'%3E%3Cg fill='%23aa8c65' fill-opacity='0.1' fill-rule='evenodd'%3E%3Cpath d='M5 0h1L0 5v1H5z'/%3E%3C/g%3E%3C/svg%3E");
            pointer-events: none;
            z-index: 1;
            border-radius: 3px;
        }
        
        .column-header {
            padding: 15px 15px;
            background-color: #655740;
            color: #f4efe1;
            border-top-left-radius: 3px;
            border-top-right-radius: 3px;
            font-weight: bold;
            text-align: center;
            font-family: 'Baskerville', 'Libre Baskerville', 'Garamond', serif;
            letter-spacing: 1px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            position: relative;
            z-index: 2;
        }
        
        .column-content {
            padding: 15px;
            flex-grow: 1;
            overflow-y: auto;
        }
        
        .note {
            background-color: var(--yellow-note);
            padding: 18px;
            margin-bottom: 20px;
            border-radius: 1px;
            box-shadow: 3px 3px 8px rgba(0,0,0,0.25);
            cursor: grab;
            position: relative;
            transform: rotate(-1deg);
            transition: transform 0.3s, box-shadow 0.3s;
            min-height: 100px;
            border: 1px solid rgba(0,0,0,0.1);
            z-index: 2;
        }
        
        .note:before {
            content: '';
            position: absolute;
            top: -4px;
            left: 50%;
            width: 30px;
            height: 8px;
            background-color: rgba(0,0,0,0.1);
            transform: translateX(-50%);
            border-radius: 1px;
        }
        
        .note:nth-child(2n) {
            transform: rotate(1deg);
            background-color: var(--blue-note);
        }
        
        .note:nth-child(3n) {
            transform: rotate(-0.5deg);
            background-color: var(--green-note);
        }
        
        .note:nth-child(4n) {
            transform: rotate(0.7deg);
            background-color: var(--pink-note);
        }
        
        .note:nth-child(5n) {
            transform: rotate(-1.2deg);
            background-color: var(--orange-note);
        }
        
        .note:hover {
            transform: scale(1.05) rotate(0);
            box-shadow: 5px 5px 10px rgba(0,0,0,0.3);
            z-index: 100;
        }
        
        .note-text {
            font-family: 'Georgia', serif;
            font-size: 1rem;
            word-wrap: break-word;
            white-space: pre-wrap;
            margin-bottom: 20px;
            line-height: 1.4;
            color: #333;
        }
        
        .note-tag {
            position: absolute;
            bottom: 10px;
            left: 15px;
            background-color: rgba(139, 69, 19, 0.1);
            border: 1px solid rgba(139, 69, 19, 0.2);
            padding: 3px 10px;
            border-radius: 3px;
            font-size: 0.8rem;
            font-weight: bold;
            font-family: 'Baskerville', 'Libre Baskerville', 'Garamond', serif;
            color: #654321;
        }
        
        .note-controls {
            position: absolute;
            bottom: 8px;
            right: 10px;
            display: flex;
            gap: 5px;
        }
        
        .note-controls button {
            padding: 3px 8px;
            font-size: 0.75rem;
            background-color: rgba(86, 61, 35, 0.1);
            color: #654321;
            border: 1px solid rgba(86, 61, 35, 0.2);
            box-shadow: 0 1px 2px rgba(0,0,0,0.1);
        }
        
        .note-controls button:hover {
            background-color: rgba(86, 61, 35, 0.2);
            transform: translateY(0);
        }
        
        .modal {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0,0,0,0.5);
            z-index: 1000;
            justify-content: center;
            align-items: center;
        }
        
        .modal-content {
            background-color: #f9f6ee;
            padding: 25px;
            border-radius: 3px;
            width: 500px;
            max-width: 90%;
            box-shadow: 0 5px 15px rgba(0,0,0,0.3);
            border: 1px solid #d5c9a6;
            background-image: url("data:image/svg+xml,%3Csvg width='6' height='6' viewBox='0 0 6 6' xmlns='http://www.w3.org/2000/svg'%3E%3Cg fill='%23aa8c65' fill-opacity='0.1' fill-rule='evenodd'%3E%3Cpath d='M5 0h1L0 5v1H5z'/%3E%3C/g%3E%3C/svg%3E");
        }
        
        .modal-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
            border-bottom: 2px solid #d5c9a6;
            padding-bottom: 10px;
        }
        
        .modal-close {
            cursor: pointer;
            font-size: 1.8rem;
            font-weight: bold;
            color: #654321;
            transition: color 0.2s;
        }
        
        .modal-close:hover {
            color: #8b4513;
        }
        
        .form-group {
            margin-bottom: 15px;
        }
        
        .form-group label {
            display: block;
            margin-bottom: 8px;
            font-weight: bold;
            color: #654321;
            font-family: 'Baskerville', 'Libre Baskerville', 'Garamond', serif;
        }
        
        .form-group textarea, .form-group input, .form-group select {
            width: 100%;
            padding: 10px 12px;
            border: 1px solid #d5c9a6;
            border-radius: 2px;
            background-color: #fcfaf5;
            font-family: 'Georgia', serif;
            color: #333;
            box-shadow: inset 0 1px 3px rgba(0,0,0,0.1);
            transition: border-color 0.3s, box-shadow 0.3s;
        }
        
        .form-group textarea:focus, .form-group input:focus, .form-group select:focus {
            outline: none;
            border-color: #8b4513;
            box-shadow: inset 0 1px 3px rgba(0,0,0,0.1), 0 0 5px rgba(139, 69, 19, 0.3);
        }
        
        .form-group textarea {
            min-height: 120px;
            line-height: 1.4;
        }

        .dragging {
            opacity: 0.8;
            transform: scale(1.05) rotate(0) !important;
        }
        
        @media (max-width: 768px) {
            .board-container {
                flex-direction: column;
                align-items: center;
                overflow-y: auto;
                overflow-x: hidden;
                padding: 15px 10px;
            }
            
            .column {
                width: 95%;
                margin-right: 0;
                margin-bottom: 20px;
                min-height: 300px;
                max-height: none;
            }
            
            .header {
                flex-direction: column;
                gap: 10px;
                padding: 12px;
            }
            
            .controls {
                flex-wrap: wrap;
                justify-content: center;
                width: 100%;
            }
            
            .filter-dropdown {
                width: 100%;
                margin-bottom: 8px;
            }
            
            button {
                padding: 10px 15px;
                min-width: 130px;
                margin: 5px;
            }
            
            .note:hover {
                transform: scale(1.02) rotate(0);
            }
            
            .modal-content {
                padding: 15px;
                width: 95%;
            }
        }
        
        /* Extra small devices */
        @media (max-width: 480px) {
            h1 {
                font-size: 1.5rem;
            }
            
            .column-header {
                font-size: 0.95rem;
                padding: 10px;
            }
            
            .note {
                padding: 12px;
                min-height: 80px;
            }
            
            .note-text {
                font-size: 0.95rem;
            }
        }
    </style>
</head>
<body>
    <div class="header">
        <h1>Reading Room Kanban</h1>
        <div class="controls">
            <select id="personFilter" class="filter-dropdown">
                <option value="all">All People</option>
                <!-- People filters will be dynamically added here -->
            </select>
            <button id="addNoteBtn">+ Add Note</button>
            <button id="exportBtn">Export Tasks</button>
        </div>
    </div>
    
    <div class="board-container">
        <div class="column">
            <div class="column-header">Backlog</div>
            <div class="column-content" data-column="backlog"></div>
        </div>
        
        <div class="column">
            <div class="column-header">To Do This Week</div>
            <div class="column-content" data-column="todo"></div>
        </div>
        
        <div class="column">
            <div class="column-header">In Progress</div>
            <div class="column-content" data-column="inprogress"></div>
        </div>
        
        <div class="column">
            <div class="column-header">Waiting For More</div>
            <div class="column-content" data-column="waiting"></div>
        </div>
        
        <div class="column">
            <div class="column-header">Done</div>
            <div class="column-content" data-column="done"></div>
        </div>
    </div>
    
    <!-- Add/Edit Note Modal -->
    <div id="noteModal" class="modal">
        <div class="modal-content">
            <div class="modal-header">
                <h2 id="modalTitle">Add New Note</h2>
                <span class="modal-close">&times;</span>
            </div>
            <form id="noteForm">
                <input type="hidden" id="noteId">
                <input type="hidden" id="noteColumn">
                <div class="form-group">
                    <label for="noteText">Task:</label>
                    <textarea id="noteText" required></textarea>
                </div>
                <div class="form-group">
                    <label for="assignedTo">Assigned To:</label>
                    <input type="text" id="assignedTo" placeholder="Enter person name">
                </div>
                <button type="submit">Save Note</button>
            </form>
        </div>
    </div>
    
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // DOM elements
            const addNoteBtn = document.getElementById('addNoteBtn');
            const exportBtn = document.getElementById('exportBtn');
            const modal = document.getElementById('noteModal');
            const closeModal = document.querySelector('.modal-close');
            const noteForm = document.getElementById('noteForm');
            const personFilter = document.getElementById('personFilter');
            const columns = document.querySelectorAll('.column-content');
            
            // State
            let notes = JSON.parse(localStorage.getItem('kanbanNotes')) || [];
            let people = new Set();
            let editingNoteId = null;
            
            // Initialize
            renderNotes();
            updatePeopleFilter();
            
            // Event listeners
            addNoteBtn.addEventListener('click', () => openModal());
            closeModal.addEventListener('click', () => modal.style.display = 'none');
            exportBtn.addEventListener('click', exportTasks);
            noteForm.addEventListener('submit', saveNote);
            personFilter.addEventListener('change', renderNotes);
            
            // Close modal when clicking outside
            window.addEventListener('click', (e) => {
                if (e.target === modal) {
                    modal.style.display = 'none';
                }
            });
            
            // Setup drag and drop
            columns.forEach(setupDropZone);
            
            // Functions
            function openModal(noteId = null) {
                const modalTitle = document.getElementById('modalTitle');
                const noteText = document.getElementById('noteText');
                const assignedTo = document.getElementById('assignedTo');
                const noteIdInput = document.getElementById('noteId');
                const noteColumnInput = document.getElementById('noteColumn');
                
                if (noteId) {
                    const note = notes.find(n => n.id === noteId);
                    if (note) {
                        modalTitle.textContent = 'Edit Note';
                        noteText.value = note.text;
                        assignedTo.value = note.assignedTo || '';
                        noteIdInput.value = note.id;
                        noteColumnInput.value = note.column;
                        editingNoteId = noteId;
                    }
                } else {
                    modalTitle.textContent = 'Add New Note';
                    noteForm.reset();
                    noteIdInput.value = '';
                    noteColumnInput.value = 'todo'; // Default column
                    editingNoteId = null;
                }
                
                modal.style.display = 'flex';
                noteText.focus();
            }
            
            function saveNote(e) {
                e.preventDefault();
                
                const noteText = document.getElementById('noteText').value.trim();
                const assignedTo = document.getElementById('assignedTo').value.trim();
                const noteId = document.getElementById('noteId').value;
                const column = document.getElementById('noteColumn').value || 'todo';
                
                if (!noteText) return;
                
                if (noteId) {
                    // Update existing note
                    const index = notes.findIndex(n => n.id === noteId);
                    if (index !== -1) {
                        notes[index].text = noteText;
                        notes[index].assignedTo = assignedTo;
                    }
                } else {
                    // Create new note
                    const newNote = {
                        id: Date.now().toString(),
                        text: noteText,
                        assignedTo: assignedTo,
                        column: column,
                        createdAt: new Date().toISOString()
                    };
                    notes.push(newNote);
                }
                
                saveNotes();
                modal.style.display = 'none';
                noteForm.reset();
            }
            
            function deleteNote(noteId) {
                if (confirm('Are you sure you want to delete this note?')) {
                    notes = notes.filter(note => note.id !== noteId);
                    saveNotes();
                }
            }
            
            function saveNotes() {
                localStorage.setItem('kanbanNotes', JSON.stringify(notes));
                renderNotes();
                updatePeopleFilter();
            }
            
            function renderNotes() {
                // Clear columns
                columns.forEach(column => {
                    column.innerHTML = '';
                });
                
                // Get filter value
                const filterValue = personFilter.value;
                
                // Filter and render notes
                notes.forEach(note => {
                    if (filterValue === 'all' || note.assignedTo === filterValue) {
                        const columnEl = document.querySelector(`[data-column="${note.column}"]`);
                        if (columnEl) {
                            columnEl.appendChild(createNoteElement(note));
                        }
                    }
                });
            }
            
            function createNoteElement(note) {
                const noteEl = document.createElement('div');
                noteEl.className = 'note';
                noteEl.dataset.id = note.id;
                noteEl.draggable = true;
                
                const textEl = document.createElement('div');
                textEl.className = 'note-text';
                textEl.textContent = note.text;
                noteEl.appendChild(textEl);
                
                if (note.assignedTo) {
                    const tagEl = document.createElement('div');
                    tagEl.className = 'note-tag';
                    tagEl.textContent = note.assignedTo;
                    noteEl.appendChild(tagEl);
                }
                
                const controlsEl = document.createElement('div');
                controlsEl.className = 'note-controls';
                
                const editBtn = document.createElement('button');
                editBtn.textContent = 'Edit';
                editBtn.addEventListener('click', () => openModal(note.id));
                controlsEl.appendChild(editBtn);
                
                const deleteBtn = document.createElement('button');
                deleteBtn.textContent = 'Delete';
                deleteBtn.addEventListener('click', () => deleteNote(note.id));
                controlsEl.appendChild(deleteBtn);
                
                noteEl.appendChild(controlsEl);
                
                // Drag events
                noteEl.addEventListener('dragstart', handleDragStart);
                noteEl.addEventListener('dragend', handleDragEnd);
                
                return noteEl;
            }
            
            function updatePeopleFilter() {
                // Get unique people
                people = new Set();
                notes.forEach(note => {
                    if (note.assignedTo) {
                        people.add(note.assignedTo);
                    }
                });
                
                // Save current selection
                const currentSelection = personFilter.value;
                
                // Clear options except 'All People'
                while (personFilter.options.length > 1) {
                    personFilter.remove(1);
                }
                
                // Add people options
                people.forEach(person => {
                    const option = document.createElement('option');
                    option.value = person;
                    option.textContent = person;
                    personFilter.appendChild(option);
                });
                
                // Restore selection if possible
                if (currentSelection !== 'all' && people.has(currentSelection)) {
                    personFilter.value = currentSelection;
                }
            }
            
            function exportTasks() {
                let exportText = "# Reading Room Kanban Tasks\n\n";
                
                // Group by column
                exportText += "## Backlog\n";
                notes.filter(note => note.column === 'backlog').forEach(note => {
                    exportText += `- ${note.text}${note.assignedTo ? ` (Assigned to: ${note.assignedTo})` : ''}\n`;
                });
                
                exportText += "\n## To Do This Week\n";
                notes.filter(note => note.column === 'todo').forEach(note => {
                    exportText += `- ${note.text}${note.assignedTo ? ` (Assigned to: ${note.assignedTo})` : ''}\n`;
                });
                
                exportText += "\n## In Progress\n";
                notes.filter(note => note.column === 'inprogress').forEach(note => {
                    exportText += `- ${note.text}${note.assignedTo ? ` (Assigned to: ${note.assignedTo})` : ''}\n`;
                });
                
                exportText += "\n## Waiting For More\n";
                notes.filter(note => note.column === 'waiting').forEach(note => {
                    exportText += `- ${note.text}${note.assignedTo ? ` (Assigned to: ${note.assignedTo})` : ''}\n`;
                });
                
                exportText += "\n## Done\n";
                notes.filter(note => note.column === 'done').forEach(note => {
                    exportText += `- ${note.text}${note.assignedTo ? ` (Assigned to: ${note.assignedTo})` : ''}\n`;
                });
                
                // Group by person
                exportText += "\n# Tasks By Person\n";
                people.forEach(person => {
                    exportText += `\n## ${person}\n`;
                    notes.filter(note => note.assignedTo === person).forEach(note => {
                        exportText += `- ${note.text} (Status: ${getColumnName(note.column)})\n`;
                    });
                });
                
                // Create and download file
                const blob = new Blob([exportText], { type: 'text/plain' });
                const url = URL.createObjectURL(blob);
                const a = document.createElement('a');
                a.href = url;
                a.download = 'kanban-tasks.txt';
                document.body.appendChild(a);
                a.click();
                document.body.removeChild(a);
                URL.revokeObjectURL(url);
                
                alert('Tasks exported! You can now copy the content to Google Docs.');
            }
            
            function getColumnName(columnId) {
                switch (columnId) {
                    case 'todo': return 'To Do';
                    case 'inprogress': return 'In Progress';
                    case 'done': return 'Done';
                    default: return columnId;
                }
            }
            
            // Drag and Drop functionality
            function handleDragStart(e) {
                e.dataTransfer.setData('text/plain', e.target.dataset.id);
                e.target.classList.add('dragging');
            }
            
            function handleDragEnd(e) {
                e.target.classList.remove('dragging');
            }
            
            function setupDropZone(column) {
                column.addEventListener('dragover', e => {
                    e.preventDefault();
                    column.classList.add('dragover');
                });
                
                column.addEventListener('dragleave', e => {
                    column.classList.remove('dragover');
                });
                
                column.addEventListener('drop', e => {
                    e.preventDefault();
                    column.classList.remove('dragover');
                    
                    const noteId = e.dataTransfer.getData('text/plain');
                    const targetColumn = column.dataset.column;
                    
                    // Update note's column
                    const noteIndex = notes.findIndex(note => note.id === noteId);
                    if (noteIndex !== -1) {
                        notes[noteIndex].column = targetColumn;
                        saveNotes();
                    }
                });
            }
        });
    </script>
</body>
</html>
